openapi: 3.0.0
info:
  title: SyncFam API
  version: 1.0.0
servers:
  - url: /api/v1
    description: Development server

components:
  schemas:
    # --- Common Wrapper Schema ---
    SuccessResponse:
      type: object
      properties:
        data:
          description: APIコールが成功した場合の実際のデータ
          # 型は各APIのレスポンス定義で上書き or anyOf/oneOf などで指定
      required:
        - data
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          description: エラーメッセージ
          example: '入力内容に誤りがあります。'
        details:
          # バリデーションエラー等の詳細を格納 (キーがフィールド名、値がエラーメッセージなど)
          type: object
          additionalProperties:
            type: string # または array of string
          example:
            {
              'name': 'タスク名は必須です。',
              'dueDate': '日付の形式が正しくありません。'
            }
      required:
        - message

    # --- ページネーション情報を含むレスポンススキーマ ---
    PaginationMeta:
      type: object
      properties:
        totalItems:
          type: integer
          description: 条件に一致する総アイテム数
          example: 120
        totalPages:
          type: integer
          description: 総ページ数
          example: 12
        currentPage:
          type: integer
          description: 現在のページ番号 (1始まり)
          example: 1
        limit:
          type: integer
          description: 1ページあたりのアイテム数
          example: 10
      required:
        - totalItems
        - totalPages
        - currentPage
        - limit
    PaginatedTasksResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Task'
          description: 現在のページのタスクデータ
        meta:
          $ref: '#/components/schemas/PaginationMeta' # ページネーション情報
      required:
        - data
        - meta

    # --- Task Schemas ---
    Task:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: タスクの一意なID (サーバーで自動採番)
          example: 'a1b2c3d4-e5f6-7890-1234-567890abcdef'
          readOnly: true # クライアントからは送信されず、サーバーが生成することを示す
        name:
          type: string
          description: タスク名
          example: '買い物に行く'
        assigneeId:
          type: string
          format: uuid
          nullable: true
          description: 担当者のユーザーID (nullの場合は未割り当て)
          example: 'f0e9d8c7-b6a5-4321-fedc-ba9876543210'
        dueDate:
          type: string
          format: date
          nullable: true
          description: 期限日 (YYYY-MM-DD)
          example: '2025-04-30'
        isCompleted:
          type: boolean
          description: 完了状態フラグ
          example: false
        labels:
          type: array
          items:
            type: string
          description: タスクに付与されたラベルの配列
          example: ["家事", "買い物"]
        createdAt:
          type: string
          format: date-time
          description: 作成日時
          example: '2025-04-20T10:00:00Z'
          readOnly: true # 作成日時は通常サーバーで設定
        updatedAt:
          type: string
          format: date-time
          description: 更新日時
          example: '2025-04-20T11:00:00Z'
          readOnly: true # 更新日時は通常サーバーで設定
      required:
        - id
        - name
        - isCompleted
        - labels
        - createdAt
        - updatedAt

    # POST /tasks のリクエストボディ (IDは含まない)
    CreateTaskInput:
      type: object
      properties:
        name:
          type: string
          description: タスク名 (必須)
          example: '新しいタスク'
          minLength: 1 # バリデーション例
          maxLength: 100
        assigneeId:
          type: string
          format: uuid
          nullable: true
          description: 担当者のユーザーID (null許容)
        dueDate:
          type: string
          format: date
          nullable: true
          description: 期限日 (YYYY-MM-DD, null許容)
          # pattern: '^\d{4}-\d{2}-\d{2}$' # 正規表現でのバリデーション例
        labels:
          type: array
          items:
            type: string
          description: 新規作成時に付与するラベルの配列 (任意)
          example: ["重要"]
          minItems: 1
      required:
        - name
        - labels

    # PUT /tasks/{taskId} のリクエストボディ
    PutTaskInput:
      type: object
      description: 更新後のタスクの完全な状態 (id, createdAt, updatedAtを除く)
      properties:
        name:
          type: string
          description: タスク名 (必須)
          example: '更新されたタスク名'
          minLength: 1
          maxLength: 100
        assigneeId:
          type: string
          format: uuid
          nullable: true
          description: 担当者のユーザーID (null許容)
        dueDate:
          type: string
          format: date
          nullable: true
          description: 期限日 (YYYY-MM-DD, null許容)
        isCompleted:
          type: boolean
          description: 完了状態フラグ (必須)
          example: true
        labels:
          type: array
          items:
            type: string
          description: 更新後のラベル配列 (既存のラベルはこれで上書きされる)
          example: ["家事"]
          minItems: 1
      required:
        - name
        - isCompleted
        - labels
        # assigneeId, dueDate は nullable なので必須ではない


    # --- User Schemas ---
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: ユーザーの一意なID
          example: 'f0e9d8c7-b6a5-4321-fedc-ba9876543210'
          readOnly: true
        name:
          type: string
          description: ユーザー名 (表示名)
          example: '田中 太郎'
        # 必要に応じて他のユーザー情報を追加 (例: email, avatarUrl)
        # email:
        #   type: string
        #   format: email
        # avatarUrl:
        #   type: string
        #   format: url
        #   nullable: true
        createdAt:
          type: string
          format: date-time
          description: アカウント作成日時
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          description: アカウント更新日時
          readOnly: true
      required:
        - id
        - name
        - createdAt
        - updatedAt

  parameters:
    TaskIdParam:
      name: taskId
      in: path
      required: true
      description: 操作対象のタスクID
      schema:
        type: string
        format: uuid
    PaginationPageParam:
      name: page
      in: query
      required: false
      description: 表示するページ番号 (1始まり)
      schema:
        type: integer
        minimum: 1
        default: 1
    PaginationLimitParam:
      name: limit
      in: query
      required: false
      description: 1ページあたりのアイテム数
      schema:
        type: integer
        minimum: 1
        maximum: 100 # 上限を設定
        default: 20 # デフォルト値を設定

paths:
  /health:
    get:
      summary: Health Check
      tags: [Meta]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object # SuccessResponse でラップしない例 (ヘルスチェック等)
                properties:
                  status:
                    type: string
                    example: OK

  # --- Tasks API ---
  /tasks:
    get:
      summary: タスク一覧取得
      tags: [Tasks]
      parameters:
        # --- ★★★ フィルター用パラメータ ★★★ ---
        - name: assigneeId
          in: query
          required: false
          description: 担当者IDでフィルタリング ('me' で自分のタスクを指定可能)
          schema:
            type: string
            example: 'me' # または UUID
        # --- ★★★ ソート用パラメータ ★★★ ---
        - name: sort
          in: query
          required: false
          description: ソート順を指定
          schema:
            type: string
            enum: # 許可するソートキーと方向
              - createdAt_desc # 作成日 (新しい順) - デフォルト
              - createdAt_asc  # 作成日 (古い順)
              - dueDate_asc    # 期限日 (昇順)
              - dueDate_desc   # 期限日 (降順)
              # - name_asc     # 名前順なども追加可能
            default: createdAt_desc
        - $ref: '#/components/parameters/PaginationPageParam'
        - $ref: '#/components/parameters/PaginationLimitParam'
      responses:
        '200':
          description: タスク一覧取得成功
          content:
            application/json:
              schema:
                # SuccessResponseでラップし、dataの中身を定義
                $ref: '#/components/schemas/PaginatedTasksResponse'
        '400': # パラメータ不正などの場合
          description: Bad Request (Invalid query parameters)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      summary: 新規タスク作成
      tags: [Tasks]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTaskInput'
            # リクエストボディ全体のサンプル例
            examples:
              minimal:
                summary: 最小限のタスク
                value:
                  name: '会議資料作成'
              full:
                summary: 全項目指定
                value:
                  name: 'プレゼン準備'
                  assigneeId: 'f0e9d8c7-b6a5-4321-fedc-ba9876543210'
                  dueDate: '2025-05-10'
      responses:
        '201':
          description: タスク作成成功
          content:
            application/json:
              schema:
                # SuccessResponseでラップし、dataの中身を定義
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Task'
                    required:
                      - data
        '400':
          description: Bad Request (バリデーションエラーなど)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /tasks/{taskId}:
    parameters:
      - $ref: '#/components/parameters/TaskIdParam'
    put:
      summary: タスク更新 (全量)
      tags: [Tasks]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutTaskInput'
            examples:
              updateTask:
                summary: タスク情報の更新
                value:
                  name: '買い物リストの更新'
                  assigneeId: 'f0e9d8c7-b6a5-4321-fedc-ba9876543210'
                  dueDate: '2025-04-25'
                  isCompleted: false
              completeTask:
                summary: タスクを完了にする
                value:
                  name: '会議室予約'
                  assigneeId: null
                  dueDate: null
                  isCompleted: true
      responses:
        '200': # 成功時は 200 OK で更新後のリソースを返す
          description: タスク更新成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Task'
                    required:
                      - data
        '400':
          description: Bad Request (バリデーションエラーなど)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Task Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: タスク削除
      tags: [Tasks]
      responses:
        '204':
          description: タスク削除成功 (No Content) # ボディは返さない
        '404':
          description: Task Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # --- Users API ---
  /members:
    get:
      summary: 家族メンバー一覧取得
      tags: [Members]
      description: 現在認証されているユーザーが所属する家族（または共有グループ）のメンバー一覧を取得します。担当者選択などで使用します。
      # parameters: # 必要に応じて検索やページネーションパラメータを追加
      #   - name: search
      #     in: query
      #     schema:
      #       type: string
      responses:
        '200':
          description: メンバー一覧取得成功
          content:
            application/json:
              schema:
                # SuccessResponseでラップし、dataの中身を定義
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/User' # Userスキーマの配列
                    required:
                      - data
              # レスポンスサンプル (任意)
              examples:
                default:
                  value:
                    data:
                      - id: 'f0e9d8c7-b6a5-4321-fedc-ba9876543210'
                        name: '田中 太郎'
                        createdAt: '2025-01-10T10:00:00Z'
                        updatedAt: '2025-04-15T11:00:00Z'
                      - id: 'e1d2c3b4-a598-7654-3210-fedcba98765f'
                        name: '山田 花子'
                        createdAt: '2025-02-20T15:30:00Z'
                        updatedAt: '2025-03-01T09:45:00Z'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'